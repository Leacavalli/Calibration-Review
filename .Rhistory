"Sequential Monte Carlo method based on particle filtering known as\nMIF for Likelihood Maximization by Iterated Filtering")
PSPO_names <- c("parallel simultaneous perturbation \noptimisation (PSPO)",
"parallel simultaneous perturbation optimization ")
raw_data_Calibration_Algorithm_other2 <- raw_data_Calibration_Algorithm_other
mutate(Other_V2= ifelse( X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2)))))))))) |>
rename("Other" = "X.Other..details..2")
raw_data_Calibration_Algorithm_other <- raw_data_V3
# Recode
ABC_SMC_names <- c("Approximate Bayesian Computation Sequential Monte Carlo scheme",
"Approximate Bayesian computation with sequential Monte Carlo sampling",
"Approximate Bayesian Computation with Sequential Monte Carlo Sampling",
"Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC) algorithm ")
HME_names <- c("History matching with emulation",
"history matching with model emulation",
"history matching with emulation",
" history matching with emulation")
IMIS_names <- c("incremental mixture importance sampling",
"Incremental mixture importance sampling",
"Incremental Mixture Importance Sampling",
" Incremental Mixture Importance Sampling",
"incremental mixture importance sampling (IMIS)",
"Incremental Mixture Importance Sampling (IMIS) ",
"a Bayesian framework with incremental mixture importance sampling",
"Incremental Mixture Importance Sampling")
MCF_names <- c("Monte-Carlo filtering",
"Monte-Carlo filtering ",
"Monte Carlo filtering")
BM_names <- c("Bayesian melding",
" Bayesian melding")
NM_names <- c("Iterative, directed-search Nelder-Mead (NM) method",
"Nelder-Mead algorithm ")
SIR_names <- c("sample-importance-resampling ",
"Sampling importance resampling ",
"Sampling Importance Resampling",
"Semi-Bayesian Sampling/Importance-Resampling algorithm")
SMC_PF_names <- c("sequential Monte Carlo method based on particle filtering",
"sequential Monte Carlo method based on particle filtering",
"Sampling Importance Resampling",
"Sequential Monte Carlo method based on particle filtering known as\nMIF for Likelihood Maximization by Iterated Filtering")
PSPO_names <- c("parallel simultaneous perturbation \noptimisation (PSPO)",
"parallel simultaneous perturbation optimization ")
raw_data_Calibration_Algorithm_other <- raw_data_V3
mutate(Other_V2= ifelse( X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2)))))))))) |>
rename("Other" = "X.Other..details..2")
raw_data_V3
mutate(Other_V2= ifelse( X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2))))))))))
raw_data_V3
mutate(Other_V2= ifelse(X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2))))))))))
raw_data_Calibration_Algorithm_other <- raw_data_V3 |>
mutate(Other_V2= ifelse(X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2)))))))))) |>
rename("Other" = "X.Other..details..2")
raw_data_Calibration_Algorithm_other |>
group_by(Other) |>
summarise(N=n()) |>
arrange(-N)
raw_data_Calibration_Algorithm_other |>
group_by(Other_V2) |>
summarise(N=n()) |>
arrange(-N)
raw_data_Calibration_Algorithm_other |>
filter(Other != "Other ")
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ")|>
select(Name.of.calibration.algorithm, Other)
raw_data_Calibration_Algorithm_ known <- raw_data_Calibration_Algorithm_other |>
raw_data_Calibration_Algorithm_known <- raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ")
table(raw_data_Calibration_Algorithm_known$Name.of.calibration.algorithm, raw_data_Calibration_Algorithm_known$Other)
raw_data_Calibration_Algorithm_known <- raw_data_V3 |>
filter(Name.of.calibration.algorithm != "Other ")
table(raw_data_Calibration_Algorithm_known$Name.of.calibration.algorithm, raw_data_Calibration_Algorithm_known$Other)
table(raw_data_Calibration_Algorithm_known$Name.of.calibration.algorithm, raw_data_Calibration_Algorithm_known$X.Other..details..2)
raw_data_Calibration_Algorithm_other$head(raw_data_Calibration_Algorithm_other)
head(raw_data_Calibration_Algorithm_other)
raw_data_Calibration_Algorithm_other_subset <- raw_data_Calibration_Algorithm_other |>
select(Covidence.., Study.ID, Name.of.calibration.algorithm, Other, Other_V2)
raw_data_Calibration_Algorithm_other_subset
write.csv(raw_data_Calibration_Algorithm_other_subset, "Data_Calibration_Algorithm.csv", row.names = F)
raw_data_Calibration_Algorithm_other |>
group_by(Other_V2) |>
summarise(N=n()) |>
arrange(-N)
# Clean environment
rm( list = ls() )
# load necessary libraries
library(tidyverse)
# Load data
setwd("~/GitHub/Calibration-Review")
raw_data <- read.csv("review_396964_20240608035120.csv")
# Recode
ABC_SMC_names <- c("Approximate Bayesian Computation Sequential Monte Carlo scheme",
"Approximate Bayesian computation with sequential Monte Carlo sampling",
"Approximate Bayesian Computation with Sequential Monte Carlo Sampling",
"Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC) algorithm ")
HME_names <- c("History matching with emulation",
"history matching with model emulation",
"history matching with emulation",
" history matching with emulation")
IMIS_names <- c("incremental mixture importance sampling",
"Incremental mixture importance sampling",
"Incremental Mixture Importance Sampling",
" Incremental Mixture Importance Sampling",
"incremental mixture importance sampling (IMIS)",
"Incremental Mixture Importance Sampling (IMIS) ",
"a Bayesian framework with incremental mixture importance sampling",
"Incremental Mixture Importance Sampling")
MCF_names <- c("Monte-Carlo filtering",
"Monte-Carlo filtering ",
"Monte Carlo filtering")
BM_names <- c("Bayesian melding",
" Bayesian melding")
NM_names <- c("Iterative, directed-search Nelder-Mead (NM) method",
"Nelder-Mead algorithm ")
SIR_names <- c("sample-importance-resampling ",
"Sampling importance resampling ",
"Sampling Importance Resampling",
"Semi-Bayesian Sampling/Importance-Resampling algorithm")
SMC_PF_names <- c("sequential Monte Carlo method based on particle filtering",
"sequential Monte Carlo method based on particle filtering",
"Sampling Importance Resampling",
"Sequential Monte Carlo method based on particle filtering known as\nMIF for Likelihood Maximization by Iterated Filtering")
PSPO_names <- c("parallel simultaneous perturbation \noptimisation (PSPO)",
"parallel simultaneous perturbation optimization ")
raw_data_Calibration_Algorithm_other <- raw_data |>
mutate(Other_V2= ifelse(X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2)))))))))) |>
rename("Other" = "X.Other..details..2")
raw_data_Calibration_Algorithm_other |>
group_by(Other_V2) |>
summarise(N=n())  |>
filter(N>1)|>
arrange(-N)
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm == "Other") |>
group_by(Other_V2) |>
summarise(N=n())  |>
filter(N>1)|>
arrange(-N)
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm == "Other ") |>
group_by(Other_V2) |>
summarise(N=n())  |>
filter(N>1)|>
arrange(-N)
# Clean environment
rm( list = ls() )
# load necessary libraries
library(tidyverse)
# Load data
setwd("~/GitHub/Calibration-Review")
raw_data <- read.csv("review_396964_20240608035120.csv")
# Recode
ABC_SMC_names <- c("Approximate Bayesian Computation Sequential Monte Carlo scheme",
"Approximate Bayesian computation with sequential Monte Carlo sampling",
"Approximate Bayesian Computation with Sequential Monte Carlo Sampling",
"Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC) algorithm ")
HME_names <- c("History matching with emulation",
"history matching with model emulation",
"history matching with emulation",
" history matching with emulation")
IMIS_names <- c("incremental mixture importance sampling",
"Incremental mixture importance sampling",
"Incremental Mixture Importance Sampling",
" Incremental Mixture Importance Sampling",
"incremental mixture importance sampling (IMIS)",
"Incremental Mixture Importance Sampling (IMIS) ",
"a Bayesian framework with incremental mixture importance sampling",
"Incremental Mixture Importance Sampling")
MCF_names <- c("Monte-Carlo filtering",
"Monte-Carlo filtering ",
"Monte Carlo filtering")
BM_names <- c("Bayesian melding",
" Bayesian melding")
NM_names <- c("Iterative, directed-search Nelder-Mead (NM) method",
"Nelder-Mead algorithm ")
SIR_names <- c("sample-importance-resampling ",
"Sampling importance resampling ",
"Sampling Importance Resampling",
"Semi-Bayesian Sampling/Importance-Resampling algorithm")
SMC_PF_names <- c("sequential Monte Carlo method based on particle filtering",
"sequential Monte Carlo method based on particle filtering",
"Sampling Importance Resampling",
"Sequential Monte Carlo method based on particle filtering known as\nMIF for Likelihood Maximization by Iterated Filtering")
PSPO_names <- c("parallel simultaneous perturbation \noptimisation (PSPO)",
"parallel simultaneous perturbation optimization ")
raw_data_Calibration_Algorithm_other <- raw_data |>
mutate(Other_V2= ifelse(X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2)))))))))) |>
rename("Other" = "X.Other..details..2")
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm == "Other ") |>
group_by(Other_V2) |>
summarise(N=n())  |>
filter(N>1)|>
arrange(-N)
raw_data_Calibration_Algorithm_other_subset <- raw_data_Calibration_Algorithm_other |>
select(Covidence.., Study.ID, Name.of.calibration.algorithm, Other, Other_V2)
write.csv(raw_data_Calibration_Algorithm_other_subset, "Data_Calibration_Algorithm.csv", row.names = F)
raw_data_Calibration_Algorithm_other |>
group_by(Other_V2) |>
summarise(N=n())  |>
filter(N>1)|>
arrange(-N)
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ") |>
group_by(Other_V2) |>
summarise(N=n())  |>
filter(N>1)|>
arrange(-N)
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ") |>
group_by(Other_V2) |>
summarise(N=n())  |>
arrange(-N)
test <-raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ")
table(test$Name.of.calibration.algorithm, Name.of.calibration.algorithm$Other)
table(test$Name.of.calibration.algorithm, test$Other)
test <-raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ") |>
filter(Other !="")
test
test <-raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ") |>
filter(Other !="")|>
select(Covidence.., Study.ID, Name.of.calibration.algorithm, Other, Other_V2)
test
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ") |>
filter(Other !="")|>
select(Covidence.., Study.ID, Name.of.calibration.algorithm, Other)
raw_data_Calibration_Algorithm_other |>
filter(Name.of.calibration.algorithm != "Other ") |>
filter(Other !="")|>
select(Covidence.., Study.ID, Name.of.calibration.algorithm, Other)
table(raw_data_V3$Model.type)
# Explore country names
raw_data |>
group_by(Study.setting) |>
summarise(N=n())|>
arrange(-N)
# install.packages("countries")
library(countries)
list_countries <- list_countries(nomenclature = "name_en")
raw_data |>
filter(! Study.setting %in% list_countries) |>
pull(Study.setting)
# Correcting some inconsistencies
raw_data_V2 <- raw_data |>
mutate(Study.setting = ifelse(Study.setting %in% c("United States", "USA"), "United States of America", Study.setting))|>
mutate(Study.setting = ifelse(Study.setting %in% c("eSwatini ", "Swaziland"), "Eswatini", Study.setting))|>
mutate(Study.setting = ifelse(Study.setting %in% c("UK"), "United Kingdom", Study.setting))|>
mutate(Study.setting = ifelse(Study.setting %in% c("Russia"), "Russian Federation", Study.setting))|>
mutate(Study.setting = str_replace(Study.setting, ", and ", ", "))|>
mutate(Study.setting = str_replace(Study.setting, "and ", ", "))|>
mutate(Study.setting = gsub(";", ",", Study.setting))|>
mutate(Study.setting = gsub(" \n", ", ", Study.setting))|>
mutate(Study.setting = gsub("\n", ", ", Study.setting))|>
mutate(Study.setting = gsub(",,", ",", Study.setting))
# still: # South Korea vs Democratic People's Republic of Korea vs DPR Korea
# change ; for ,
# change "/n" for ","
unique(raw_data_V2|>
filter(! Study.setting %in% list_countries) |>
pull(Study.setting))
# Outliers
raw_data_V2|>
filter(Study.setting %in% c("105 LMICs", "Southeast Asia", "sub-Saharan Africa", "Sub-Saharan Africa", "Not reported", ""))
# 3251: Study.setting = "105 LMICs"
# 1140: Study.setting = "Southeast Asia
# 1099: Study.setting = "sub-Saharan Africa"
# 2404 : Study.setting = "Not reported"
# 2007 : Study.setting = ""
# 1159: Study.setting = "Sub-Saharan Africa"
table(raw_data_V3$Model.type)
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))
table(raw_data_V3$Model.type)
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))|>
mutate(Model.type = ifelse(Model.type== "Other: Individual-based", "Individual-based ", Model.type))
table(raw_data_V3$Model.type)
# 0.4 Stochasticity in model
table(raw_data_V3$Stochasticity.in.model)
raw_data_V3  |>
filter(Stochasticity.in.model =="Other: ")|>
pull(Covidence..)
# B.1.4. How many parameters were calibrated?
table(raw_data_V3$How.many.parameters.were.calibrated.)
raw_data_V3  |>
filter(How.many.parameters.were.calibrated. =="Other: Single")|>
pull(Covidence..)
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))|>
mutate(Model.type = ifelse(Model.type== "Other: Individual-based", "Individual-based ", Model.type))|>
mutate(How.many.parameters.were.calibrated. = ifelse(How.many.parameters.were.calibrated.== "Other: Single", "Single ", How.many.parameters.were.calibrated.))
# B.1.4. How many parameters were calibrated?
table(raw_data_V3$How.many.parameters.were.calibrated.)
#  B.2.3.  How many calibration targets were used for estimation?
table(raw_data_V3$How.many.calibration.targets.were.used.for.estimation.)
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))|>
mutate(Model.type = ifelse(Model.type== "Other: Individual-based", "Individual-based ", Model.type))|>
mutate(How.many.parameters.were.calibrated. = ifelse(How.many.parameters.were.calibrated.== "Other: Single", "Single ", How.many.parameters.were.calibrated.))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Multiple", "Multiple ", How.many.calibration.targets.were.used.for.estimation.))
#  B.2.3.  How many calibration targets were used for estimation?
table(raw_data_V3$How.many.calibration.targets.were.used.for.estimation.)
table(raw_data_V3$Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm)
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))|>
mutate(Model.type = ifelse(Model.type== "Other: Individual-based", "Individual-based ", Model.type))|>
mutate(How.many.parameters.were.calibrated. = ifelse(How.many.parameters.were.calibrated.== "Other: Single", "Single ", How.many.parameters.were.calibrated.))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Multiple", "Multiple ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Ad-Hoc Distance", "Ad-hoc distance function (as in Approximate Bayesian Computation or least squares) ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))
# C.4. Goodness-of-fit (GOF) measure employed within calibration algorithm
table(raw_data_V3$Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm)
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))|>
mutate(Model.type = ifelse(Model.type== "Other: Individual-based", "Individual-based ", Model.type))|>
mutate(How.many.parameters.were.calibrated. = ifelse(How.many.parameters.were.calibrated.== "Other: Single", "Single ", How.many.parameters.were.calibrated.))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Multiple", "Multiple ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Ad-Hoc Distance", "Ad-hoc distance function (as in Approximate Bayesian Computation or least squares)", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))
# C.4. Goodness-of-fit (GOF) measure employed within calibration algorithm
table(raw_data_V3$Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm)
# D.1. Nature of calibration results
table(raw_data_V3$Nature.of.calibration.results)
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))|>
mutate(Model.type = ifelse(Model.type== "Other: Individual-based", "Individual-based ", Model.type))|>
mutate(How.many.parameters.were.calibrated. = ifelse(How.many.parameters.were.calibrated.== "Other: Single", "Single ", How.many.parameters.were.calibrated.))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Multiple", "Multiple ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Ad-Hoc Distance", "Ad-hoc distance function (as in Approximate Bayesian Computation or least squares)", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Point estimate", Point estimate (single parameter / parameter set)", Nature.of.calibration.results))
# Correct
raw_data_V3 <- raw_data_V2  |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence== "Other: No prior knowledge is incorporated for parameters to be calibrated.", "No prior knowledge is incorporated for parameters to be calibrated. ", External.beliefs.or.evidence))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Single", "Single ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Other", "Other ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Data likelihood", "Data likelihood ", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Sample estimate", "Sample estimate (multiple parameter sets)", Nature.of.calibration.results))|>
mutate(Stochasticity.in.model = ifelse(Stochasticity.in.model== "Other: Stochastic", "Stochastic model ", Stochasticity.in.model))|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm== "Other: Other", "Other ", Name.of.calibration.algorithm))|>
mutate(Model.type = ifelse(Model.type== "Other: Individual-based", "Individual-based ", Model.type))|>
mutate(How.many.parameters.were.calibrated. = ifelse(How.many.parameters.were.calibrated.== "Other: Single", "Single ", How.many.parameters.were.calibrated.))|>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.== "Other: Multiple", "Multiple ", How.many.calibration.targets.were.used.for.estimation.))|>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm== "Other: Ad-Hoc Distance", "Ad-hoc distance function (as in Approximate Bayesian Computation or least squares)", Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm))|>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results== "Other: Point estimate", "Point estimate (single parameter / parameter set)", Nature.of.calibration.results))
# D.1. Nature of calibration results
table(raw_data_V3$Nature.of.calibration.results)
# Recode
ABC_SMC_names <- c("Approximate Bayesian Computation Sequential Monte Carlo scheme",
"Approximate Bayesian computation with sequential Monte Carlo sampling",
"Approximate Bayesian Computation with Sequential Monte Carlo Sampling",
"Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC) algorithm ")
HME_names <- c("History matching with emulation",
"history matching with model emulation",
"history matching with emulation",
" history matching with emulation")
IMIS_names <- c("incremental mixture importance sampling",
"Incremental mixture importance sampling",
"Incremental Mixture Importance Sampling",
" Incremental Mixture Importance Sampling",
"incremental mixture importance sampling (IMIS)",
"Incremental Mixture Importance Sampling (IMIS) ",
"a Bayesian framework with incremental mixture importance sampling",
"Incremental Mixture Importance Sampling")
MCF_names <- c("Monte-Carlo filtering",
"Monte-Carlo filtering ",
"Monte Carlo filtering")
BM_names <- c("Bayesian melding",
" Bayesian melding")
NM_names <- c("Iterative, directed-search Nelder-Mead (NM) method",
"Nelder-Mead algorithm ")
SIR_names <- c("sample-importance-resampling ",
"Sampling importance resampling ",
"Sampling Importance Resampling",
"Semi-Bayesian Sampling/Importance-Resampling algorithm")
SMC_PF_names <- c("sequential Monte Carlo method based on particle filtering",
"sequential Monte Carlo method based on particle filtering",
"Sampling Importance Resampling",
"Sequential Monte Carlo method based on particle filtering known as\nMIF for Likelihood Maximization by Iterated Filtering")
PSPO_names <- c("parallel simultaneous perturbation \noptimisation (PSPO)",
"parallel simultaneous perturbation optimization ")
raw_data_Calibration_Algorithm_other <- raw_data_V3 |>
mutate(Other_V2= ifelse(X.Other..details..2 %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(X.Other..details..2 %in% HME_names, "History matching with emulation",
ifelse(X.Other..details..2 %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(X.Other..details..2 %in% MCF_names, "Monte-Carlo filtering",
ifelse(X.Other..details..2 %in% SIR_names, "Sampling importance resampling",
ifelse(X.Other..details..2 %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(X.Other..details..2 %in% BM_names, "Bayesian melding",
ifelse(X.Other..details..2 %in% NM_names, "Nelder-Mead algorithm",
ifelse(X.Other..details..2 %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)", X.Other..details..2)))))))))) |>
rename("Other" = "X.Other..details..2")
raw_data_Calibration_Algorithm_other_subset <- raw_data_Calibration_Algorithm_other |>
select(Covidence.., Study.ID, Name.of.calibration.algorithm, Other, Other_V2)
# write.csv(raw_data_Calibration_Algorithm_other_subset, "Data_Calibration_Algorithm.csv", row.names = F)
raw_data_Calibration_Algorithm_other_subset |>
filter(Name.of.calibration.algorithm != "Other ") |>
filter(Other !="")|>
select(Covidence.., Study.ID, Name.of.calibration.algorithm, Other)
raw_data_Calibration_Algorithm_other_subset |>
group_by(Other_V2) |>
summarise(N=n())  |>
filter(N>)|>
raw_data_Calibration_Algorithm_other_subset |>
filter(Name.of.calibration.algorithm != "Other ") |>
filter(Other !="")|>
pull(Covidence..)
