mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "size;", "size,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "partners;", "partners,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., " temperature; humidity;", " temperature, humidity,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., " ; ", "; "))
# Upload data for recoding the "Other type of data" column
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Other_Type.of.data <- read.xlsx("Other_Type.of.data.used.for.defining.calibration.targets.xlsx", sheetName = "Sheet1")
# Make one row per study (i.e. merge the several types of data)
Other_Type.of.data_V2 <- Other_Type.of.data |>
filter(Category.1 == "Other ")%>%
group_by(Covidence.ID) %>%
summarize(Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = paste(Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., collapse = ", "))
# Subset the studies that do have "Other' type of data
Other_Type.of.data_V3 <- Other_Type.of.data %>%
group_by(Covidence.ID) %>%
summarize(Type = paste(Category.1, collapse = "; "))
# Join
Other_Type.of.data_V4 <- left_join(Other_Type.of.data_V3, Other_Type.of.data_V2) |>
mutate(Covidence.ID= as.character(Covidence.ID))|>
mutate(Type= str_replace_all(Type, " ; ", "; "))
# Subset the studies that have "Other" type of data
clean_data_sub_Other <- clean_data_V4 %>%
filter(grepl("Other", Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.))%>%
select(Covidence.ID, Model.type, Stochasticity.in.model, Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)%>%
unique()
# Recode the type of data and "Other' for these studies
## Recode function to remove duplicate types of data and list "Other' last
recode_categories <- function(x) {
# Split the string by ";"
elements <- unlist(strsplit(x, "; "))
# Remove duplicates
unique_elements <- unique(elements)
# Separate "Other" if it exists
if ("Other" %in% unique_elements) {
unique_elements <- unique_elements[unique_elements != "Other"]
unique_elements <- c(unique_elements, "Other")
}
# Combine elements back into a string
return(paste(unique_elements, collapse = "; "))
}
## Recode
clean_data_sub_Other_recode <- left_join(clean_data_sub_Other, Other_Type.of.data_V4) |>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_remove(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "; Other "))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_remove(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "; Other"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_remove(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "Other"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.=ifelse(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.==" ", Type, paste(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., Type, sep= "; ")))|>
select(Covidence.ID, Model.type, Stochasticity.in.model, Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., " ; ", "; "))%>%
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = sapply(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., recode_categories))
# Merge the studies that did and did not have "Other" types of data
## Subset the studies that do not have "Other" type of data
clean_data_sub_no_Other <- clean_data_V4 %>%
filter(! grepl("Other", Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)) %>%
select(Covidence.ID, Model.type, Stochasticity.in.model,Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,
Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)
## Merge
clean_data_Type_recode <- rbind(clean_data_sub_no_Other, clean_data_sub_Other_recode)%>%
unique()
# Join the recoded column to the original data
clean_data_V5 <- left_join((clean_data_V4 %>%
select(-Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., - Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)),
clean_data_Type_recode) |>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = str_replace(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,"Incidence ", "Incidence"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = str_replace(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,"Time to event ", "Time to event")) |>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = str_replace(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,"Other ", "Other")) |>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = str_replace(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,"Demographic;", "Demographic (e.g., population size, sex and age distribution);"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = str_replace(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,"Treatment and treatment outcomes;", "Treatment and treatment outcomes (e.g., mortality, recovery);"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = str_remove(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,"Contact/exposure; "))
clean_data_V5.2 <- clean_data_V5 |>
mutate(What.is.the.size.of.the.calibration.output.= str_replace_all(What.is.the.size.of.the.calibration.output., ",", ""))|>
mutate(What.is.the.size.of.the.calibration.output.V2= as.numeric(str_replace_all(What.is.the.size.of.the.calibration.output., ",", "")))
# Keep the clean rows
clean_data_V5.2_clean <- clean_data_V5.2 |>
filter(! (is.na(What.is.the.size.of.the.calibration.output.V2) & What.is.the.size.of.the.calibration.output. != "Not reported"))
# Subset and clean the miscoded rows
clean_data_V5.2_dirty <- clean_data_V5.2 |>
filter((is.na(What.is.the.size.of.the.calibration.output.V2) & What.is.the.size.of.the.calibration.output. != "Not reported"))|>
mutate(What.is.the.size.of.the.calibration.output. = c("1; Not reported", "232-8857", "1; Not reported", "1; 300", "1000", "690-2254 (country and model specific)"))|>
mutate(Nature.of.calibration.results = c("Not reported ", "Sample estimate (multiple parameter sets)", "Not reported ", "Not reported ", "Sample estimate (multiple parameter sets)", "Sample estimate (multiple parameter sets)"))
# Finalize the data
clean_data_V5_final <- rbind(clean_data_V5.2_clean, clean_data_V5.2_dirty)|>
select(-What.is.the.size.of.the.calibration.output.V2)
# Clean "Bayesian Melding" studies
clean_data_V6 <- clean_data_V5_final |>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm=="Approximate Bayesian Computation", "Approximate Bayesian Computation (ABC)", Name.of.calibration.algorithm))|>
mutate(Name.of.calibration.algorithm= ifelse(Covidence.ID == 1393, "Markov Chain Monte Carlo", Name.of.calibration.algorithm))|>
mutate(Name.of.calibration.algorithm= ifelse(Covidence.ID == 1847, "Other ", Name.of.calibration.algorithm))|>
mutate(Other_Name.of.calibration.algorithm= ifelse(Covidence.ID == 1393, NA, Other_Name.of.calibration.algorithm))|>
mutate(Other_Name.of.calibration.algorithm= ifelse(Covidence.ID == 1847, "Sampling importance resampling (SIR)", Other_Name.of.calibration.algorithm))
# Make vectors containing all versions of each algorithm's name
ABC_SMC_names <- c("Approximate Bayesian Computation Sequential Monte Carlo scheme",
"Approximate Bayesian computation with sequential Monte Carlo sampling",
"Approximate Bayesian Computation with Sequential Monte Carlo Sampling",
"Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC) algorithm ",
"Approximate Bayesian Computation Sequential Monte Carlo (ABC SMC) method",
"Approximate Bayesian Computation with Sequential Monte Carlo sampling (ABC-SMC) method")
HME_names <- c("History matching with emulation",
"history matching with model emulation",
"history matching with emulation",
" history matching with emulation")
IMIS_names <- c("incremental mixture importance sampling",
"Incremental mixture importance sampling",
"Incremental Mixture Importance Sampling",
" Incremental Mixture Importance Sampling",
"incremental mixture importance sampling (IMIS)",
"Incremental Mixture Importance Sampling (IMIS) ",
"a Bayesian framework with incremental mixture importance sampling",
"Incremental Mixture Importance Sampling", "Incremental Mixture Importance Sampling ")
MCF_names <- c("Monte-Carlo filtering",
"Monte-Carlo filtering ",
"Monte Carlo filtering")
BM_names <- c("Bayesian melding",
" Bayesian melding")
NM_names <- c("Iterative, directed-search Nelder-Mead (NM) method",
"Nelder-Mead algorithm ","Nelder-Mead Simplex Method" ,
"Nelder-Mead")
SIR_names <- c("sample-importance-resampling ",
"Sampling importance resampling ",
"Sampling Importance Resampling",
"Sampling importance resampling",
"Semi-Bayesian Sampling/Importance-Resampling algorithm",
"Sampling-importance-resampling (SIR) approach")
SMC_PF_names <- c("sequential Monte Carlo method based on particle filtering",
"sequential Monte Carlo method based on particle filtering",
"particle Markov\nchain Monte Carlo (PMCMC",
"Sequential Monte Carlo method based on particle filtering known as\nMIF for Likelihood Maximization by Iterated Filtering")
PSPO_names <- c("parallel simultaneous perturbation \noptimisation (PSPO)",
"parallel simultaneous perturbation optimization ")
# Recode the Other algorithm names with standardized name
clean_data_V7 <- clean_data_V6 |>
mutate(Other_Name.of.calibration.algorithm_V2= ifelse(Other_Name.of.calibration.algorithm %in% ABC_SMC_names, "Approximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(Other_Name.of.calibration.algorithm %in% HME_names, "History matching with emulation (HME)",
ifelse(Other_Name.of.calibration.algorithm %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(Other_Name.of.calibration.algorithm %in% MCF_names, "Sequential Monte Carlo (SMC)",
ifelse(Other_Name.of.calibration.algorithm %in% SIR_names, "Sampling importance resampling (SIR)",
ifelse(Other_Name.of.calibration.algorithm %in% SMC_PF_names, "Sequential Monte Carlo (SMC)",
ifelse(Other_Name.of.calibration.algorithm %in% BM_names, "Bayesian melding",
ifelse(Other_Name.of.calibration.algorithm %in% NM_names, "Nelder-Mead algorithm",
ifelse(Other_Name.of.calibration.algorithm %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)",
ifelse(Other_Name.of.calibration.algorithm == "Latin hypercube sampling", "Latin Hypercube Sampling",
ifelse(Other_Name.of.calibration.algorithm == " Levemberg–Marquard optimization algorithm ", "Levenberg-Marquardt optimization algorithm",
ifelse(Other_Name.of.calibration.algorithm == "A deviance-based loss was calculated using the following formula:\n\t ", "Deviance-based loss", ifelse(Other_Name.of.calibration.algorithm == "Multiobjective genetic algorithm", "Genetic algorithm", ifelse(Other_Name.of.calibration.algorithm == "Diffusion approximation, minimum constrast estimation", "Minimum contrast estimation", ifelse(Other_Name.of.calibration.algorithm == "Diffusion approximation, minimum constrast estimation", "Minimum contrast estimation", ifelse(Other_Name.of.calibration.algorithm == "adaptive population Monte Carlo Approximate Bayesian Computation\nalgorithm (APMC-ABC)", "Adaptive population Monte Carlo Approximate Bayesian Computation (APMC-ABC)", Other_Name.of.calibration.algorithm)))))))))))))))))|>
rename("Other_Name.of.calibration.algorithm_old"="Other_Name.of.calibration.algorithm",
"Other_Name.of.calibration.algorithm"="Other_Name.of.calibration.algorithm_V2")|>
select(-Other_Name.of.calibration.algorithm_old)
# Move algorithms from "Other" to "Name calibration algorithm"
## Upload data for coding the "AIMS" column
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Aim_Alg_name <- read.xlsx("Aims_calibration_algorithm.xlsx", sheetName = "Sheet1")
## Move names
clean_data_V8 <- clean_data_V7 |>
mutate(Name.of.calibration.algorithm = ifelse(Other_Name.of.calibration.algorithm %in% Aim_Alg_name$Name.of.calibration.algorithm, Other_Name.of.calibration.algorithm, Name.of.calibration.algorithm),
Other_Name.of.calibration.algorithm=ifelse(Other_Name.of.calibration.algorithm %in% Aim_Alg_name$Name.of.calibration.algorithm, NA, Other_Name.of.calibration.algorithm))
# Add Aim columns
clean_data_V9 <- left_join(clean_data_V8, Aim_Alg_name) |>
mutate(Aim.of.calibration.procedure = ifelse(Name.of.calibration.algorithm == "Not reported", "Not reported", Aim.of.calibration.procedure))
# Further Recode "Other Name calibration algorithm" manually.
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Other_Name.of.calibration.algorithm_df <- read.xlsx("Other_Name.of.calibration.algorithm.xlsx", sheetName = "Sheet1") |>
mutate(Covidence.ID= as.character(Covidence.ID))
Recode <- clean_data_V9 |>
filter(Covidence.ID %in% Other_Name.of.calibration.algorithm_df$Covidence.ID)|>
select(-Name.of.calibration.algorithm, -Other_Name.of.calibration.algorithm, -Aim.of.calibration.procedure)
Recoded <-left_join(Recode, Other_Name.of.calibration.algorithm_df)|>
mutate(Name.of.calibration.algorithm= ifelse(Name.of.calibration.algorithm=="Other", "Other ", Name.of.calibration.algorithm))
clean_data_V10 <- rbind(clean_data_V9 |> filter(! Covidence.ID %in% Other_Name.of.calibration.algorithm_df$Covidence.ID) ,
Recoded)|>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm =="History matching with emulation; Approximate Bayesian Computation (ABC)", "History matching with emulation (HME); Approximate Bayesian Computation (ABC)", Name.of.calibration.algorithm))
# Add a "Algorithm Family" column
ABC_family <- c("Adaptive population Monte Carlo Approximate Bayesian Computation (APMC-ABC)",
"Approximate Bayesian Computation Accept-Reject Random sampling (ABC-RS); Approximate Bayesian Computation (ABC)",
"Approximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)")
clean_data_V11 <- clean_data_V10 |>
mutate(Calibration.algorithm.Family = Name.of.calibration.algorithm) |>
mutate(Calibration.algorithm.Family = ifelse(Calibration.algorithm.Family %in% ABC_family, "Approximate Bayesian Computation (ABC)", Calibration.algorithm.Family))
setwd("~/GitHub/Calibration-Review/1.Data Cleaning")
write.csv(clean_data_V11, "Clean_data.csv", row.names = F)
library(xlsx)
setwd("~/GitHub/Calibration-Review/3.Results")
write.xlsx(as.data.frame(clean_data_V11), file="Table1.xlsx",
sheetName = "Table 1", append=TRUE , row.names = F, col.names = T)
# Clean environment
rm( list = ls() )
# load necessary libraries
library(tidyverse)
# Load data
setwd("~/GitHub/Calibration-Review/1.Data Cleaning")
clean_data <- read.csv("Clean_data.csv")
# 0.1 Year published
df_0.1 <- clean_data |>
group_by(Year.published) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Year.published")|>
mutate(Field= "0.1 Year published", .before = Options)
# 0.2 Disease type
df_0.2 <- clean_data |>
select(Disease.type..choose.all.that.apply.)|>
separate_rows(Disease.type..choose.all.that.apply., sep = "; ")|>
group_by(Disease.type..choose.all.that.apply.) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="Disease.type..choose.all.that.apply.")|>
mutate(Field= "0.2 Disease type", .before = Options)
# 0.3 Model type
df_0.3 <- clean_data |>
mutate(Model.type = factor(Model.type, levels= c("Compartmental", "Individual-based", "Hawkes Process", "Not reported", "Other")))|>
group_by(Model.type) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Model.type")|>
mutate(Field= "0.3 Model type", .before = Options)
# 0.4 Stochasticity in model
df_0.4 <- clean_data |>
mutate(Stochasticity.in.model = factor(Stochasticity.in.model, levels= c("Deterministic model ", "Stochastic model", "Not reported")))|>
group_by(Stochasticity.in.model) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Stochasticity.in.model")|>
mutate(Field= "0.4 Stochasticity in model", .before = Options)
# A.1 Scientific problem being solved (what is the purpose of calibration?)
df_A.1 <- clean_data |>
select(Scientific.problem.being.solved)|>
separate_rows(Scientific.problem.being.solved, sep = "; ")|>
group_by(Scientific.problem.being.solved) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="Scientific.problem.being.solved")|>
mutate(Field= "A.1 Scientific problem being solved (what is the purpose of calibration?)", .before = Options)
# B.1.1. Beliefs or evidence
df_B.1.1 <- clean_data |>
mutate(External.beliefs.or.evidence = factor(External.beliefs.or.evidence, levels= c("Prior knowledge is incorporated for at least one parameter to be calibrated; e.g., as a prior distribution over the parameter.", "No prior knowledge is incorporated for parameters to be calibrated. ", "Not reported")))|>
group_by(External.beliefs.or.evidence) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="External.beliefs.or.evidence")|>
mutate(Field= "B.1.1. Beliefs or evidence", .before = Options)
# B.1.2. Choice of parameters to calibrate
df_B.1.2 <- clean_data |>
mutate(Choice.of.parameters.to.calibrate = factor(Choice.of.parameters.to.calibrate, levels= c("All parameters", "Subset of parameters", "Not reported")))|>
group_by(Choice.of.parameters.to.calibrate) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Choice.of.parameters.to.calibrate")|>
mutate(Field= "B.1.2. Choice of parameters to calibrate", .before = Options)
# B.1.3. What justification was provided for choice of parameters to calibrate? Only for studies which calibrated a subset of parameters.
df_B.1.3 <- clean_data |>
select(What.justification.was.provided.for.choice.of.parameters.to.calibrate.)|>
separate_rows(What.justification.was.provided.for.choice.of.parameters.to.calibrate., sep = "; ")|>
group_by(What.justification.was.provided.for.choice.of.parameters.to.calibrate.) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="What.justification.was.provided.for.choice.of.parameters.to.calibrate.")|>
mutate(Field= "B.1.3. What justification was provided for choice of parameters to calibrate? Only for studies which calibrated a subset of parameters.", .before = Options)|>
mutate(Options = factor(Options, levels=c("Parameters are relevant to question of interest.", "Parameters are uncertain.", "Not reported ", "Other")))|>
arrange(Options)
# B.1.4. How many parameters were calibrated?
df_B.1.4 <- clean_data |>
mutate(How.many.parameters.were.calibrated. = factor(How.many.parameters.were.calibrated., levels= c("Single ", "Multiple", "Not reported")))|>
group_by(How.many.parameters.were.calibrated.) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="How.many.parameters.were.calibrated.")|>
mutate(Field= "B.1.4. How many parameters were calibrated?", .before = Options)
# B.2.1. Type of data used for defining calibration targets
df_B.2.1 <- clean_data  |>
select(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)|>
separate_rows(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., sep = "; ")|>
group_by(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.")|>
mutate(Field= "B.2.1. Type of data used for defining calibration targets", .before = Options)
order_type <- c((df_B.2.1 |>
filter(! Options %in% c("Other", "Not reported "))|>
arrange(-Count) |>
pull(Options)), "Other", "Not reported ")
df_B.2.1 <- df_B.2.1|>
mutate(Options = factor(Options, levels=order_type))|>
arrange(Options)
# B.2.2. Resolution of data used for defining calibration targets
df_B.2.2 <- clean_data |>
select(Resolution.of.data..used.for.defining.calibration.targets)|>
separate_rows(Resolution.of.data..used.for.defining.calibration.targets, sep = "; ")|>
group_by(Resolution.of.data..used.for.defining.calibration.targets) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="Resolution.of.data..used.for.defining.calibration.targets")|>
mutate(Field= "B.2.2. Resolution of data used for defining calibration targets", .before = Options)
#  B.2.3.  How many calibration targets were used for estimation?
df_B.2.3 <- clean_data |>
group_by(How.many.calibration.targets.were.used.for.estimation.) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="How.many.calibration.targets.were.used.for.estimation.")|>
mutate(Field= "B.2.3.  How many calibration targets were used for estimation?", .before = Options)
# C.1. Number of steps
df_C.1 <- clean_data |>
group_by(Number.of.steps..single.or.sequential.) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Number.of.steps..single.or.sequential.")|>
mutate(Field= "C.1. Number of steps", .before = Options)
# C.2.1 Name of calibration algorithm
df_C.2.1 <- clean_data |>
select(Name.of.calibration.algorithm)|>
separate_rows(Name.of.calibration.algorithm, sep = "; ")|>
group_by(Name.of.calibration.algorithm) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="Name.of.calibration.algorithm")|>
mutate(Field= "C.2.1. Name of calibration algorithm", .before = Options)
ordered_Name.of.calibration.algorithm <- c((df_C.2.1 |>
filter(!Options %in% c( "Not reported", "Other "))|>
arrange(-Count)|>
pull(Options)), "Other ", "Not reported")
df_C.2.1  <- df_C.2.1|>
mutate(Options = factor(Options, levels=ordered_Name.of.calibration.algorithm))|>
arrange(Options)
# C.2.2 calibration algorithm Family
df_C.2.2 <- clean_data |>
select(Calibration.algorithm.Family)|>
separate_rows(Calibration.algorithm.Family, sep = "; ")|>
group_by(Calibration.algorithm.Family) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="Calibration.algorithm.Family")|>
mutate(Field= "C.2.2 calibration algorithm Family", .before = Options)
ordered_Name.of.calibration.algorithm <- c((df_C.2.2 |>
filter(!Options %in% c( "Not reported", "Other "))|>
arrange(-Count)|>
pull(Options)), "Other ", "Not reported")
df_C.2.2  <- df_C.2.2|>
mutate(Options = factor(Options, levels=ordered_Name.of.calibration.algorithm))|>
arrange(Options)
# C.3. Is calibration implementation (code) available in an open-access repository?
df_C.3 <- clean_data |>
group_by(Is.calibration.implementation..code..available.in.an.open.access.repository.) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Is.calibration.implementation..code..available.in.an.open.access.repository.")|>
mutate(Field= "C.3. Is calibration implementation (code) available in an open-access repository?", .before = Options)
# C.4. Goodness-of-fit (GOF) measure employed within calibration algorithm
df_C.4 <- clean_data |>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = factor(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm, levels= c("Ad-hoc distance function (as in Approximate Bayesian Computation or least squares)", "Data likelihood ", "Not reported", "Not clear", "Other ")))|>
group_by(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm")|>
mutate(Field= "C.4. Goodness-of-fit (GOF) measure employed within calibration algorithm", .before = Options)
# C.5. What programming language was used for calibration?
df_C.5 <- clean_data |>
select(What.programming.language.was.used.for.calibration.)|>
separate_rows(What.programming.language.was.used.for.calibration., sep = "; ")|>
group_by(What.programming.language.was.used.for.calibration.) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="What.programming.language.was.used.for.calibration.")|>
mutate(Field= "C.5. What programming language was used for calibration?", .before = Options)|>
mutate(Options = factor(Options, levels=c("R", "Python", "Matlab", "Julia", "C++", "Not reported", "Other ")))|>
arrange(Options)
# C.6. Do authors list any programming packages used for calibration?
df_C.6 <- clean_data |>
mutate(Do.authors.list.any.programming.packages.used.for.calibration. = factor(Do.authors.list.any.programming.packages.used.for.calibration., levels= c("Yes", "No")))|>
group_by(Do.authors.list.any.programming.packages.used.for.calibration.) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Do.authors.list.any.programming.packages.used.for.calibration.")|>
mutate(Field= "C.6. Do authors list any programming packages used for calibration?", .before = Options)
# D.1. Nature of calibration results
df_D.1 <- clean_data |>
mutate(Nature.of.calibration.results = factor(Nature.of.calibration.results, levels= c("Point estimate (single parameter / parameter set)", "Sample estimate (multiple parameter sets)", "Distribution estimate (a distribution function which generates parameter values)", "Not reported ", "Other ")))|>
group_by(Nature.of.calibration.results) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="Nature.of.calibration.results")|>
mutate(Field= "D.1. Nature of calibration results", .before = Options)
# D.2. How are calibration results reported?
df_D.2 <- clean_data |>
select(How.are.calibration.results.reported.)|>
separate_rows(How.are.calibration.results.reported., sep = "; ")|>
group_by(How.are.calibration.results.reported.) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="How.are.calibration.results.reported.")|>
mutate(Field= "D.2. How are calibration results reported?", .before = Options)|>
mutate(Options = factor(Options, levels=c("Numerical: e.g. as value(s).", "Graphical: e.g., as a plot of calibrated model trend versus calibration targets. ", "Calibration results are not reported. ")))|>
arrange(Options)
# D.3. How is uncertainty in calibration outputs reported?
df_D.3 <- clean_data |>
select(How.is.uncertainty.in.calibration.outputs.reported.)|>
separate_rows(How.is.uncertainty.in.calibration.outputs.reported., sep = "; ")|>
group_by(How.is.uncertainty.in.calibration.outputs.reported.) |>
summarise(Count=n()) |>
mutate(Percentage= 100*round(Count/sum(Count), 3))|>
rename("Options" ="How.is.uncertainty.in.calibration.outputs.reported.")|>
mutate(Field= "D.3. How is uncertainty in calibration outputs reported?", .before = Options)|>
mutate(Options = factor(Options, levels=c("Numerical: As uncertainty intervals around estimates or model outputs. e.g., 95% CI: 1.5 - 4.5.", "Graphical: As a plot. E.g., a line with shaded areas indicating uncertainty intervals ", "Uncertainty in calibration outputs is not reported.")))|>
arrange(Options)
# D.4. What is the size of the calibration output?
df_D.4 <- clean_data |>
mutate(size.of.the.calibration.output.reported = ifelse(What.is.the.size.of.the.calibration.output. == "Not reported", "Not reported", "[Number provided]"))|>
mutate(size.of.the.calibration.output.reported = factor(size.of.the.calibration.output.reported, levels= c("[Number provided]", "Not reported")))|>
group_by(size.of.the.calibration.output.reported) |>
summarise(Count=n(),
Percentage= 100*round(Count/nrow(clean_data), 3))|>
rename("Options" ="size.of.the.calibration.output.reported")|>
mutate(Field= "D.4. What is the size of the calibration output?", .before = Options)
Objective1_df <- rbind(df_0.1, df_0.2, df_0.3, df_0.4,
df_A.1,
df_B.1.1, df_B.1.2, df_B.1.3, df_B.1.4,
df_B.2.1, df_B.2.2, df_B.2.3,
df_C.1, df_C.2.1, df_C.2.2, df_C.3, df_C.4, df_C.5, df_C.6,
df_D.1, df_D.2, df_D.3, df_D.4)
Objective1_df
library(xlsx)
setwd("~/GitHub/Calibration-Review/3.Results")
write.xlsx(as.data.frame(Objective1_df), file="Table2.xlsx",
sheetName = "Table 2", append=TRUE , row.names = F, col.names = T)
# Clean environment
rm( list = ls() )
# load necessary libraries
library(tidyverse)
# Load data
setwd("~/GitHub/Calibration-Review/1.Data Cleaning")
clean_data <- read.csv("Clean_data.csv")
# A.1 Scientific problem being solved (what is the purpose of calibration?)
score_A.1 <- clean_data |>
mutate(Scientific.problem.being.solved = ifelse(Scientific.problem.being.solved=="Not reported", 0, 1))|>
select(Scientific.problem.being.solved)
# B.1.1. Beliefs or evidence
score_B.1.1 <- clean_data |>
mutate(External.beliefs.or.evidence = ifelse(External.beliefs.or.evidence=="Not reported", 0, 1))|>
select(External.beliefs.or.evidence)
# B.1.2. Choice of parameters to calibrate
score_B.1.2 <- clean_data |>
mutate(Choice.of.parameters.to.calibrate = ifelse(Choice.of.parameters.to.calibrate=="Not reported", 0, 1))|>
select(Choice.of.parameters.to.calibrate)
# B.1.3. What justification was provided for choice of parameters to calibrate? Only for studies which calibrated a subset of parameters.
score_B.1.3 <- clean_data |>
mutate(What.justification.was.provided.for.choice.of.parameters.to.calibrate. = ifelse(What.justification.was.provided.for.choice.of.parameters.to.calibrate.=="Not reported ", 0, 1))|>
select(What.justification.was.provided.for.choice.of.parameters.to.calibrate.)
# B.2.1. Type of data used for defining calibration targets
score_B.2.1 <- clean_data |>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = ifelse(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.=="Not reported ", 0, 1))|>
select(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)
# B.2.2. Resolution of data used for defining calibration targets
score_B.2.2 <- clean_data |>
mutate(Resolution.of.data..used.for.defining.calibration.targets = ifelse(Resolution.of.data..used.for.defining.calibration.targets=="Not reported ", 0, 1))|>
select(Resolution.of.data..used.for.defining.calibration.targets)
#  B.2.3.  How many calibration targets were used for estimation?
score_B.2.3 <- clean_data |>
mutate(How.many.calibration.targets.were.used.for.estimation. = ifelse(How.many.calibration.targets.were.used.for.estimation.=="Not reported ", 0, 1))|>
select(How.many.calibration.targets.were.used.for.estimation.)
# C.1. Number of steps
score_C.1 <- clean_data |>
mutate(Number.of.steps..single.or.sequential. = ifelse(Number.of.steps..single.or.sequential.=="Not reported", 0, 1))|>
select(Number.of.steps..single.or.sequential.)
# C.2. Name of calibration algorithm
score_C.2 <- clean_data |>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm=="Not reported", 0, 1))|>
select(Name.of.calibration.algorithm)
# C.3. Is calibration implementation (code) available in an open-access repository?
score_C.3 <- clean_data |>
mutate(Is.calibration.implementation..code..available.in.an.open.access.repository. = ifelse(Is.calibration.implementation..code..available.in.an.open.access.repository.=="Link reported and accessible", 0, 1))|>
select(Is.calibration.implementation..code..available.in.an.open.access.repository.)
# C.4. Goodness-of-fit (GOF) measure employed within calibration algorithm
score_C.4 <- clean_data |>
mutate(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm = ifelse(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm=="Not reported", 0, 1))|>
select(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm)
# D.1. Nature of calibration results
score_D.1 <- clean_data |>
mutate(Nature.of.calibration.results = ifelse(Nature.of.calibration.results=="Not reported ", 0, 1))|>
select(Nature.of.calibration.results)
# D.2. How are calibration results reported?
score_D.2 <- clean_data |>
mutate(How.are.calibration.results.reported. = ifelse(How.are.calibration.results.reported.=="Calibration results are not reported. ", 0, 1))|>
select(How.are.calibration.results.reported.)
# D.3. How is uncertainty in calibration outputs reported?
score_D.3 <- clean_data |>
mutate(How.is.uncertainty.in.calibration.outputs.reported. = ifelse(How.is.uncertainty.in.calibration.outputs.reported.=="Uncertainty in calibration outputs is not reported.", 0, 1))|>
select(How.is.uncertainty.in.calibration.outputs.reported.)
# D.4. What is the size of the calibration output?
score_D.4 <- clean_data |>
mutate(What.is.the.size.of.the.calibration.output. = ifelse(What.is.the.size.of.the.calibration.output.=="Not reported", 0, 1)) |>
select(What.is.the.size.of.the.calibration.output.)
Objective3_df <- cbind("Study.Title" = clean_data$Full.title,
"Study.DOI" = clean_data$Study.DOI,
score_A.1,
score_B.1.1, score_B.1.2, score_B.1.3,
score_B.2.1, score_B.2.2, score_B.2.3,
score_C.1, score_C.2, score_C.3, score_C.4,
score_D.1, score_D.2, score_D.3, score_D.4)
Objective3_df
Objective3_df <- Objective3_df |>
mutate(Sum_Reporting_Score = rowSums(Objective3_df[,-(1:3)])) |>
mutate(Reporting_comprehensiveness = ifelse(Sum_Reporting_Score> 10, "High",
ifelse(Sum_Reporting_Score> 5, "Fair", "Low")))
Objective3_df
table(Objective3_df$Reporting_comprehensiveness)
# Number articles reporting each category
N_reporting_cat <- as.vector( colSums( Objective3_df[,-c(1:2, ncol(Objective3_df)-1, ncol(Objective3_df))] ) )
# Percentage articles reporting each category
p_reporting_cat <- as.vector(round(100 * N_reporting_cat / nrow(Objective3_df)))
# Percentage articles reporting each category
Objective3_df <- rbind(Objective3_df,
c("","Total Number of articles", N_reporting_cat, "", ""),
c("","Percentage of articles", p_reporting_cat, "", ""))
library(xlsx)
setwd("~/GitHub/Calibration-Review/3.Results")
write.xlsx(as.data.frame(Objective3_df), file="Table3.xlsx",
sheetName = "Table 3", append=TRUE , row.names = F, col.names = T)
