table(Calibration_data_V3$Stochasticity.in.model)
# A.1 Scientific problem being solved (what is the purpose of calibration?)
table(Calibration_data_V3$Scientific.problem.being.solved)
# B.1.1. Beliefs or evidence
table(Calibration_data_V3$External.beliefs.or.evidence)
# B.1.2. Choice of parameters to calibrate
table(Calibration_data_V3$Choice.of.parameters.to.calibrate)
# B.1.3. What justification was provided for choice of parameters to calibrate? Only for studies which calibrated a subset of parameters.
table(Calibration_data_V3$What.justification.was.provided.for.choice.of.parameters.to.calibrate.)
# B.1.4. How many parameters were calibrated?
table(Calibration_data_V3$How.many.parameters.were.calibrated.)
# B.2.2. Resolution of data used for defining calibration targets
table(Calibration_data_V3$Resolution.of.data..used.for.defining.calibration.targets)
#  B.2.3.  How many calibration targets were used for estimation?
table(Calibration_data_V3$How.many.calibration.targets.were.used.for.estimation.)
# C.1. Number of steps
table(Calibration_data_V3$Number.of.steps..single.or.sequential.)
# C.2. Name of calibration algorithm
table(Calibration_data_V3$Name.of.calibration.algorithm)
# C.3. Is calibration implementation (code) available in an open-access repository?
table(Calibration_data_V3$Is.calibration.implementation..code..available.in.an.open.access.repository.)
# C.4. Goodness-of-fit (GOF) measure employed within calibration algorithm
table(Calibration_data_V3$Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm)
# C.5. What programming language was used for calibration?
table(Calibration_data_V3$What.programming.language.was.used.for.calibration.)
# C.6. Do authors list any programming packages used for calibration?
table(Calibration_data_V3$Do.authors.list.any.programming.packages.used.for.calibration.)
# D.1. Nature of calibration results
table(Calibration_data_V3$Nature.of.calibration.results)
# D.2. How are calibration results reported?
table(Calibration_data_V3$How.are.calibration.results.reported.)
# D.3. How is uncertainty in calibration outputs reported?
table(Calibration_data_V3$How.is.uncertainty.in.calibration.outputs.reported.)
# D.4. What is the size of the calibration output?
table(Calibration_data_V3  |>
mutate(size.of.the.calibration.output.reported = ifelse(What.is.the.size.of.the.calibration.output. == "Not reported", "Not reported", "[Number provided]"))|>
pull(size.of.the.calibration.output.reported))
# If number provided, what is the range of the reported size?
Calibration_data_V3  |>
mutate(size.of.the.calibration.output.reported = ifelse(What.is.the.size.of.the.calibration.output. == "Not reported", "Not reported", "[Number provided]"))|>
filter(size.of.the.calibration.output.reported != "Not reported")|>
pull(What.is.the.size.of.the.calibration.output.)
clean_data <- Calibration_data_V3
# 1. Model.type
# Check inconsistencies
clean_data |> group_by(Model.type) |> summarise(N=n())
clean_data |> filter(Model.type=="Other") |> select(Model.type, Other_Model.type)
clean_data |> filter(Other_Model.type != "", Model.type!="Other") |>select(Model.type, Other_Model.type)
# Clean inconsistencies
clean_data_V1 <- clean_data |> mutate(Other_Model.type = ifelse(Other_Model.type == "105 LMICs (Country names not reported)", "", Other_Model.type))
# 2. What.justification.was.provided.for.choice.of.parameters.to.calibrate
# Check inconsistencies
clean_data |> group_by(What.justification.was.provided.for.choice.of.parameters.to.calibrate.) |> summarise(N=n())
clean_data |>
filter(What.justification.was.provided.for.choice.of.parameters.to.calibrate.=="Other") |>
select(What.justification.was.provided.for.choice.of.parameters.to.calibrate., Other_What.justification.was.provided.for.choice.of.parameters.to.calibrate.)
clean_data |>
filter(Other_What.justification.was.provided.for.choice.of.parameters.to.calibrate. != "",
What.justification.was.provided.for.choice.of.parameters.to.calibrate.!="Other") |>
select(What.justification.was.provided.for.choice.of.parameters.to.calibrate., Other_What.justification.was.provided.for.choice.of.parameters.to.calibrate.)
# no inconsistencies
# 3. Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.
# Check inconsistencies
clean_data |> group_by(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.) |> summarise(N=n())
clean_data |>
filter(grepl("Other",Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.),
Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. == "")|>
select(Covidence.ID)
clean_data |>
filter(Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. != "",
! grepl("Other",Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)) |>
select(Covidence.ID)
# no inconsistencies
# 4. Name.of.calibration.algorithm
# Check inconsistencies
clean_data |>
filter(Name.of.calibration.algorithm=="Other ") |>
filter(Other_Name.of.calibration.algorithm=="") |>
pull(Covidence.ID)
clean_data |>
filter(Other_Name.of.calibration.algorithm != "",
Name.of.calibration.algorithm !="Other ") |>
select(Name.of.calibration.algorithm, Other_Name.of.calibration.algorithm)
# Clean inconsistencies
clean_data_V2 <- clean_data_V1 |>
mutate(Other_Name.of.calibration.algorithm = ifelse(Other_Name.of.calibration.algorithm == "A Bayesian framework", "", Other_Name.of.calibration.algorithm))|>
mutate(Other_Name.of.calibration.algorithm = ifelse(Other_Name.of.calibration.algorithm == " ", "", Other_Name.of.calibration.algorithm))|>
mutate(Other_Name.of.calibration.algorithm = ifelse(Other_Name.of.calibration.algorithm == "Not reported", "", Other_Name.of.calibration.algorithm))
# 5. Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm
# Check inconsistencies
clean_data |>
filter(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm=="Other ") |>
filter(Other_Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm=="") |>
select(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm, Other_Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm, Not_Clear_Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm)
clean_data |>
filter(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm=="Not clear") |>
filter(Not_Clear_Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm=="") |>
select(Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm, Other_Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm, Not_Clear_Goodness.of.fit..GOF..measure.employed.within.calibration.algorithm)
# no inconsistencies
# 6. Nature.of.calibration.results
# Check inconsistencies
clean_data |>
filter(Nature.of.calibration.results=="Other ") |>
select(Nature.of.calibration.results, Other_Nature.of.calibration.results)
clean_data |>
filter(Other_Nature.of.calibration.results != "",
Nature.of.calibration.results != "Other ") |>
select(Nature.of.calibration.results, Other_Nature.of.calibration.results)
# no inconsistencies
# 7. How.are.calibration.results.reported.
# Check inconsistencies
clean_data |> group_by(How.are.calibration.results.reported.) |> summarise(N=n())
clean_data |> filter(Other_How.are.calibration.results.reported. != "")
# no inconsistencies
# 8. How.is.uncertainty.in.calibration.outputs.reported.
# Check inconsistencies
clean_data |> group_by(How.is.uncertainty.in.calibration.outputs.reported.) |> summarise(N=n())
clean_data |> filter(Other_How.is.uncertainty.in.calibration.outputs.reported. != "")
# no inconsistencies
# Final formating
clean_data_V3 <- clean_data_V2  |>
mutate(across(contains("Other_"), ~ ifelse(. == "", NA, .)))|>
mutate(across(contains("Not_Clear_"), ~ ifelse(. == "", NA, .)))
# Format correctly the "Type of data" column
clean_data_V4 <- clean_data_V3|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., ", ", "; "))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "e.g.;", "e.g.,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "mortality;", "mortality,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "size;", "size,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "partners;", "partners,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., " temperature; humidity;", " temperature, humidity,"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace_all(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., " ; ", "; "))
# Upload data for recoding the "Other type of data" column
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Other_Type.of.data <- read.xlsx("Other_Type.of.data.used.for.defining.calibration.targets.xlsx", sheetName = "Sheet1")
# Make one row per study (i.e. merge the several types of data)
Other_Type.of.data_V2 <- Other_Type.of.data |>
filter(Category.1 == "Other ")%>%
group_by(Covidence.ID) %>%
summarize(Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = paste(Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., collapse = ", "))
# Subset the studies that do have "Other' type of data
Other_Type.of.data_V3 <- Other_Type.of.data %>%
group_by(Covidence.ID) %>%
summarize(Type = paste(Category.1, collapse = "; "))
# Join
Other_Type.of.data_V4 <- left_join(Other_Type.of.data_V3, Other_Type.of.data_V2) |>
mutate(Covidence.ID= as.character(Covidence.ID))|>
mutate(Type= str_replace_all(Type, " ; ", "; "))
# Subset the studies that have "Other" type of data
clean_data_sub_Other <- clean_data_V4 %>%
filter(grepl("Other", Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.))%>%
select(Covidence.ID, Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)
# Recode the type of data and "Other' for these studies
## Recode function to remove duplicate types of data and list "Other' last
recode_categories <- function(x) {
# Split the string by ";"
elements <- unlist(strsplit(x, "; "))
# Remove duplicates
unique_elements <- unique(elements)
# Separate "Other" if it exists
if ("Other" %in% unique_elements) {
unique_elements <- unique_elements[unique_elements != "Other"]
unique_elements <- c(unique_elements, "Other")
}
# Combine elements back into a string
return(paste(unique_elements, collapse = "; "))
}
## Recode
clean_data_sub_Other_recode <- left_join(clean_data_sub_Other, Other_Type.of.data_V4) |>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_remove(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "; Other"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_remove(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., "Other"))|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.=ifelse(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.==" ", Type, paste(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., Type, sep= "; ")))|>
select(Covidence.ID, Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)|>
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.= str_replace(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., " ; ", "; "))%>%
mutate(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply. = sapply(Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., recode_categories))
# Merge the studies that did and did not have "Other" types of data
## Subset the studies that do not have "Other" type of data
clean_data_sub_no_Other <- clean_data_V4 %>%
filter(! grepl("Other", Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)) %>%
select(Covidence.ID, Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.,
Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)
## Merge
clean_data_Type_recode <- rbind(clean_data_sub_no_Other, clean_data_sub_Other_recode)
# Join the recoded column to the original data
clean_data_V5 <- left_join((clean_data_V4 %>%
select(-Type.of.data.used.for.defining.calibration.targets..select.all.that.apply., - Other_Type.of.data.used.for.defining.calibration.targets..select.all.that.apply.)),
clean_data_Type_recode)
# Make vectors containing all versions of each algorithm's name
ABC_SMC_names <- c("Approximate Bayesian Computation Sequential Monte Carlo scheme",
"Approximate Bayesian computation with sequential Monte Carlo sampling",
"Approximate Bayesian Computation with Sequential Monte Carlo Sampling",
"Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC) algorithm ",
"Approximate Bayesian Computation Sequential Monte Carlo (ABC SMC) method",
"Approximate Bayesian Computation with Sequential Monte Carlo sampling (ABC-SMC) method")
HME_names <- c("History matching with emulation",
"history matching with model emulation",
"history matching with emulation",
" history matching with emulation")
IMIS_names <- c("incremental mixture importance sampling",
"Incremental mixture importance sampling",
"Incremental Mixture Importance Sampling",
" Incremental Mixture Importance Sampling",
"incremental mixture importance sampling (IMIS)",
"Incremental Mixture Importance Sampling (IMIS) ",
"a Bayesian framework with incremental mixture importance sampling",
"Incremental Mixture Importance Sampling", "Incremental Mixture Importance Sampling ")
MCF_names <- c("Monte-Carlo filtering",
"Monte-Carlo filtering ",
"Monte Carlo filtering")
BM_names <- c("Bayesian melding",
" Bayesian melding")
NM_names <- c("Iterative, directed-search Nelder-Mead (NM) method",
"Nelder-Mead algorithm ","Nelder-Mead Simplex Method" ,
"Nelder-Mead")
SIR_names <- c("sample-importance-resampling ",
"Sampling importance resampling ",
"Sampling Importance Resampling",
"Sampling importance resampling",
"Semi-Bayesian Sampling/Importance-Resampling algorithm",
"Sampling-importance-resampling (SIR) approach")
SMC_PF_names <- c("sequential Monte Carlo method based on particle filtering",
"sequential Monte Carlo method based on particle filtering",
"particle Markov\nchain Monte Carlo (PMCMC",
"Sequential Monte Carlo method based on particle filtering known as\nMIF for Likelihood Maximization by Iterated Filtering")
PSPO_names <- c("parallel simultaneous perturbation \noptimisation (PSPO)",
"parallel simultaneous perturbation optimization ")
# Recode the Other algorithm names with standardized name
Data_Calibration_Algorithm_v2 <- clean_data_V5 |>
mutate(Other_Name.of.calibration.algorithm_V2= ifelse(Other_Name.of.calibration.algorithm %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(Other_Name.of.calibration.algorithm %in% HME_names, "History matching with emulation",
ifelse(Other_Name.of.calibration.algorithm %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(Other_Name.of.calibration.algorithm %in% MCF_names, "Monte-Carlo filtering",
ifelse(Other_Name.of.calibration.algorithm %in% SIR_names, "Sampling importance resampling (SIR)",
ifelse(Other_Name.of.calibration.algorithm %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(Other_Name.of.calibration.algorithm %in% BM_names, "Bayesian melding",
ifelse(Other_Name.of.calibration.algorithm %in% NM_names, "Nelder-Mead algorithm",
ifelse(Other_Name.of.calibration.algorithm %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)",
ifelse(Other_Name.of.calibration.algorithm == "Latin hypercube sampling", "Latin Hypercube Sampling",
ifelse(Other_Name.of.calibration.algorithm == " Levemberg–Marquard optimization algorithm ", "Levenberg-Marquardt optimization algorithm",
ifelse(Other_Name.of.calibration.algorithm == "A deviance-based loss was calculated using the following formula:\n\t ", "Deviance-based loss", ifelse(Other_Name.of.calibration.algorithm == "Multiobjective genetic algorithm", "Genetic algorithm", ifelse(Other_Name.of.calibration.algorithm == "Diffusion approximation, minimum constrast estimation", "Minimum contrast estimation", ifelse(Other_Name.of.calibration.algorithm == "Diffusion approximation, minimum constrast estimation", "Minimum contrast estimation", Other_Name.of.calibration.algorithm))))))))))))))))
"Approximate Bayesian Computation and Markov Chain Monte Carlo"
test <- unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
pull(Other_Name.of.calibration.algorithm_V2))
test
Data_Calibration_Algorithm_v2
unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
pull(Other_Name.of.calibration.algorithm_V2))
# Upload data for coding the "AIMS" column
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Aim_Alg_name <- read.xlsx("Aims_calibration_algorithm.xlsx", sheetName = "Sheet1")
test <- unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
pull(Other_Name.of.calibration.algorithm_V2))
test
test <- unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Other_Name.of.calibration.algorithm_V2))
test
clean_data_V5 |>
filter(Other_Name.of.calibration.algorithm =="bayesian melding")
clean_data_V5 |>
filter(Other_Name.of.calibration.algorithm =="Bayesian melding")
clean_data_V5$Other_Name.of.calibration.algorithm
clean_data_V5 |>
filter(Other_Name.of.calibration.algorithm ==" Bayesian melding")|>
select(Covidence.ID)
clean_data_V5 |>
filter(Name.of.calibration.algorithm_V2=="Other")|>
filter(Other_Name.of.calibration.algorithm ==" Bayesian melding")|>
select(Covidence.ID)
clean_data_V5 |>
filter(Name.of.calibration.algorithm_V2=="Other ")
clean_data_V5 |>
filter(Name.of.calibration.algorithm=="Other")
clean_data_V5 |>
filter(Name.of.calibration.algorithm=="Other ")
clean_data_V5 |>
filter(Name.of.calibration.algorithm=="Other ") |>
pull(Other_Name.of.calibration.algorithm)
Data_Calibration_Algorithm_v2 |>
group_by(Other_Name.of.calibration.algorithm_V2)|>
summarise(N=n())|>
arrange(N)
Data_Calibration_Algorithm_v2 |>
group_by(Other_Name.of.calibration.algorithm_V2)|>
mutate(N=n())|>
filter(N==1)|>
select(Covidence.ID, Other_Name.of.calibration.algorithm_V2)
test
test <- unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Other_Name.of.calibration.algorithm_V2))
test
Data_Calibration_Algorithm_v2 |>
group_by(Other_Name.of.calibration.algorithm_V2)|>
summarise(N=n())
arrange(-N=n
Data_Calibration_Algorithm_v2 |>
group_by(Other_Name.of.calibration.algorithm_V2)|>
summarise(N=n())|>
arrange(-N=n)
Data_Calibration_Algorithm_v2 |>
group_by(Other_Name.of.calibration.algorithm_V2)|>
summarise(N=n())|>
arrange(-N)
Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other")
Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other")|>
filter(Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))
Aim_Alg_name$Name.of.calibration.algorithm
Aim_Alg_name
Aim_Alg_name |>
filter(Name.of.calibration.algorithm %in% Data_Calibration_Algorithm_v2$Name.of.calibration.algorithm)
Data_Calibration_Algorithm_v2|>
filter(Name.of.calibration.algorithm %in% Aim_Alg_name$Name.of.calibration.algorithm)
unique(Data_Calibration_Algorithm_v2|>
filter(Name.of.calibration.algorithm %in% Aim_Alg_name$Name.of.calibration.algorithm)|>
pull(Name.of.calibration.algorithm))
# Which pre-defined algorithm is NOT in the AIMs tables ?
unique(Data_Calibration_Algorithm_v2|>
filter(! Name.of.calibration.algorithm %in% Aim_Alg_name$Name.of.calibration.algorithm)|>
pull(Name.of.calibration.algorithm))
# Which pre-defined algorithm is NOT in the AIMs tables ?
unique(clean_data_V5|>
filter(! Name.of.calibration.algorithm %in% Aim_Alg_name$Name.of.calibration.algorithm)|>
pull(Name.of.calibration.algorithm))
unique(Aim_Alg_name |>
filter(! Name.of.calibration.algorithm %in% Data_Calibration_Algorithm_v2$Name.of.calibration.algorithm)|>
pull(Name.of.calibration.algorithm))
setwd("~/GitHub/Calibration-Review/1.Data Cleaning/Temp")
write.csv(test, "Other_Data_Calibration_Algorithm.csv", row.names = F)
setwd("~/GitHub/Calibration-Review/1.Data Cleaning/Temp")
write.csv(test, "Other_Data_Calibration_Algorithm.csv", row.names = F)
# Upload data for coding the "AIMS" column
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Aim_Alg_name <- read.xlsx("Aims_calibration_algorithm.xlsx", sheetName = "Sheet1")
unique(Aim_Alg_name |>
filter(! Name.of.calibration.algorithm %in% Data_Calibration_Algorithm_v2$Name.of.calibration.algorithm)|>
pull(Name.of.calibration.algorithm))
unique(Aim_Alg_name |>
filter(! Name.of.calibration.algorithm %in% clean_data_V5$Name.of.calibration.algorithm)|>
pull(Name.of.calibration.algorithm))
clean_data_V6 <- clean_data_V5 |>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm=="Approximate Bayesian Computation", "Approximate Bayesian Computation (ABC)", Name.of.calibration.algorithm))
# Which pre-defined algorithm is NOT in the AIMs tables ?
unique(clean_data_V6|>
filter(! Name.of.calibration.algorithm %in% Aim_Alg_name$Name.of.calibration.algorithm)|>
pull(Name.of.calibration.algorithm))
Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other")|>
filter(Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))
Aim_Alg_name$Name.of.calibration.algorithm
Data_Calibration_Algorithm_v2$Other_Name.of.calibration.algorithm_V2
unique(Aim_Alg_name$Name.of.calibration.algorithm)
Data_Calibration_Algorithm_v2$Other_Name.of.calibration.algorithm_V2
Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other")
Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other ")|>
filter(Other_Name.of.calibration.algorithm_V2 %in% Aim_Alg_name$Name.of.calibration.algorithm)
Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other ")|>
filter(Other_Name.of.calibration.algorithm_V2 %in% Aim_Alg_name$Name.of.calibration.algorithm)|>
pull(Other_Name.of.calibration.algorithm_V2)
unique(Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other ")|>
filter(Other_Name.of.calibration.algorithm_V2 %in% Aim_Alg_name$Name.of.calibration.algorithm)|>
pull(Other_Name.of.calibration.algorithm_V2))
unique(Aim_Alg_name |>
filter(! Name.of.calibration.algorithm %in% c(Data_Calibration_Algorithm_v2$Other_Name.of.calibration.algorithm_V2, clean_data_V6$Name.of.calibration.algorithm))|>
pull(Name.of.calibration.algorithm))
unique(Data_Calibration_Algorithm_v2 |>
filter(Name.of.calibration.algorithm == "Other ")|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% Aim_Alg_name$Name.of.calibration.algorithm)|>
pull(Other_Name.of.calibration.algorithm_V2))
# Clean "Bayesian Melding" studies
clean_data_V6 <- clean_data_V5 |>
mutate(Name.of.calibration.algorithm = ifelse(Name.of.calibration.algorithm=="Approximate Bayesian Computation", "Approximate Bayesian Computation (ABC)", Name.of.calibration.algorithm))|>
mutate(Name.of.calibration.algorithm= ifelse(Covidence.ID == 1393, "Markov Chain Monte Carlo", Name.of.calibration.algorithm))|>
mutate(Name.of.calibration.algorithm= ifelse(Covidence.ID == 1847, "Sampling importance resampling (SIR)", Name.of.calibration.algorithm))|>
mutate(Other_Name.of.calibration.algorithm= ifelse(Covidence.ID == 1393, NA, Other_Name.of.calibration.algorithm))|>
mutate(Other_Name.of.calibration.algorithm= ifelse(Covidence.ID == 1847, NA, Other_Name.of.calibration.algorithm))
clean_data_V6 |>
filter(Covidence.ID %in% c(1197, 600))
clean_data_V6 |>
filter(Covidence.ID %in% c("1197", "600"))
clean_data_V6
clean_data_V6 |>
filter(Covidence.ID ==1197)
clean_data_V6 |>
filter(Covidence.ID ==1197)|>
pull(Other_Name.of.calibration.algorithm)
clean_data_V6 |>
filter(Covidence.ID ==600)|>
pull(Other_Name.of.calibration.algorithm)
Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Other_Name.of.calibration.algorithm_V2)
nrow(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Other_Name.of.calibration.algorithm_V2))
nrow(unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Other_Name.of.calibration.algorithm_V2)))
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Bayesian melding")
# Recode the Other algorithm names with standardized name
Data_Calibration_Algorithm_v2 <- clean_data_V6 |>
mutate(Other_Name.of.calibration.algorithm_V2= ifelse(Other_Name.of.calibration.algorithm %in% ABC_SMC_names, "Aproximate Bayesian Computation Sequential Monte Carlo (ABC-SMC)",
ifelse(Other_Name.of.calibration.algorithm %in% HME_names, "History matching with emulation",
ifelse(Other_Name.of.calibration.algorithm %in% IMIS_names, "Incremental Mixture Importance Sampling (IMIS)",
ifelse(Other_Name.of.calibration.algorithm %in% MCF_names, "Monte-Carlo filtering",
ifelse(Other_Name.of.calibration.algorithm %in% SIR_names, "Sampling importance resampling (SIR)",
ifelse(Other_Name.of.calibration.algorithm %in% SMC_PF_names, "Sequential Monte Carlo method based on particle filtering",
ifelse(Other_Name.of.calibration.algorithm %in% BM_names, "Bayesian melding",
ifelse(Other_Name.of.calibration.algorithm %in% NM_names, "Nelder-Mead algorithm",
ifelse(Other_Name.of.calibration.algorithm %in% PSPO_names, "Parallel Simultaneous perturbation Optimisation (PSPO)",
ifelse(Other_Name.of.calibration.algorithm == "Latin hypercube sampling", "Latin Hypercube Sampling",
ifelse(Other_Name.of.calibration.algorithm == " Levemberg–Marquard optimization algorithm ", "Levenberg-Marquardt optimization algorithm",
ifelse(Other_Name.of.calibration.algorithm == "A deviance-based loss was calculated using the following formula:\n\t ", "Deviance-based loss", ifelse(Other_Name.of.calibration.algorithm == "Multiobjective genetic algorithm", "Genetic algorithm", ifelse(Other_Name.of.calibration.algorithm == "Diffusion approximation, minimum constrast estimation", "Minimum contrast estimation", ifelse(Other_Name.of.calibration.algorithm == "Diffusion approximation, minimum constrast estimation", "Minimum contrast estimation", Other_Name.of.calibration.algorithm))))))))))))))))
test <- Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Other_Name.of.calibration.algorithm_V2)
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Bayesian melding")
Data_Calibration_Algorithm_v2 |>
filter(Full.title %in% Multiple_Calibration_data$Full.title)
Data_Calibration_Algorithm_v2 |>
filter(Full.title %in% Multiple_Calibration_data$Full.title)|>
select(Other_Name.of.calibration.algorithm_V2)
test |>
filter(Full.title %in% Multiple_Calibration_data$Full.title)|>
select(Other_Name.of.calibration.algorithm_V2)
test <- Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Full.title, Other_Name.of.calibration.algorithm_V2)
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Bayesian melding")
test |>
filter(Full.title %in% Multiple_Calibration_data$Full.title)|>
select(Other_Name.of.calibration.algorithm_V2)
Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Full.title, Other_Name.of.calibration.algorithm_V2)
test <- unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Full.title, Other_Name.of.calibration.algorithm_V2))
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Bayesian melding")
test |>
filter(Full.title %in% Multiple_Calibration_data$Full.title)|>
select(Other_Name.of.calibration.algorithm_V2)
test |>
select(Other_Name.of.calibration.algorithm_V2)
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Latin hypercube sampling")
Aim_Alg_name
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Aim_Alg_name <- read.xlsx("Aims_calibration_algorithm.xlsx", sheetName = "Sheet1")
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Aim_Alg_name <- read.xlsx("Aims_calibration_algorithm.xlsx", sheetName = "Sheet1")
test <- unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Study.DOI, Full.title, Other_Name.of.calibration.algorithm_V2))
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Latin hypercube sampling")
Aim_Alg_name
Data_Calibration_Algorithm_v2 |>
group_by(Other_Name.of.calibration.algorithm_V2)|>
summarise(N=n())|>
arrange(-N)
unique(Aim_Alg_name$Name.of.calibration.algorithm)
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Latin hypercube sampling")
Data_Calibration_Algorithm_v2 |>
filter(Other_Name.of.calibration.algorithm_V2 =="Latin hypercube sampling")
Data_Calibration_Algorithm_v2 |>
filter(Other_Name.of.calibration.algorithm_V2 =="Latin Hypercube Sampling")
test |>
filter(Other_Name.of.calibration.algorithm_V2 =="Latin Hypercube Sampling")
setwd("~/GitHub/Calibration-Review/1.Data Cleaning/Temp")
write.csv(test, "Other_Data_Calibration_Algorithm.csv", row.names = F)
# Upload data for coding the "AIMS" column
setwd("~/GitHub/Calibration-Review/0.Raw Data")
Aim_Alg_name <- read.xlsx("Aims_calibration_algorithm.xlsx", sheetName = "Sheet1")
test
test <- unique(Data_Calibration_Algorithm_v2 |>
filter(! is.na(Other_Name.of.calibration.algorithm_V2))|>
filter(! Other_Name.of.calibration.algorithm_V2 %in% unique(Aim_Alg_name$Name.of.calibration.algorithm))|>
select(Covidence.ID, Study.DOI, Full.title, Other_Name.of.calibration.algorithm_V2))
test
setwd("~/GitHub/Calibration-Review/1.Data Cleaning/Temp")
write.csv(test, "Other_Data_Calibration_Algorithm.csv", row.names = F)
list.files()
setwd("~/GitHub/Calibration-Review/1.Data Cleaning/Temp")
write.csv(test, "Other_Data_Calibration_Algorithm.csv", row.names = F)
